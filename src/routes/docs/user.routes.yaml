tags:
  name: Users
  description: User management endpoints

/api/users:
  get:
    summary: Get all users
    tags: [Users]
    responses:
      200:
        description: List of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  post:
    summary: Create a new user
    tags: [Users]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      201:
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      400:
        description: Invalid input data

/api/users/profile:
  get:
    tags: [Users]
    summary: Get user profile
    security:
      - bearerAuth: []
    responses:
      200:
        description: User profile retrieved successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      401:
        description: Unauthorized - Invalid or missing token

/api/users/update-profile:
  patch:
    tags: [Users]
    summary: Update user profile
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
                format: email
    responses:
      200:
        description: Profile updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      401:
        description: Unauthorized - Invalid or missing token
      400:
        description: Invalid input data

/api/users/profile-picture:
  post:
    tags: [Users]
    summary: Upload profile picture
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              image:
                type: string
                format: binary
    responses:
      200:
        description: Profile picture uploaded successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                profilePicture:
                  type: string
      401:
        description: Unauthorized - Invalid or missing token
      400:
        description: Invalid file format or size

/api/users/all:
  get:
    tags: [Users]
    summary: Get all users (Admin only)
    security:
      - bearerAuth: []
    responses:
      200:
        description: List of all users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - User is not an admin

/api/users/{id}:
  get:
    tags: [Users]
    summary: Get user by ID
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: User ID
    responses:
      200:
        description: User found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      401:
        description: Unauthorized - Invalid or missing token
      404:
        description: User not found
  patch:
    tags: [Users]
    summary: Update user by ID
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
                format: email
              role:
                type: string
                enum: [user, admin]
              isActive:
                type: boolean
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      401:
        description: Unauthorized - Invalid or missing token
      404:
        description: User not found
      400:
        description: Invalid input data
  delete:
    tags: [Users]
    summary: Delete user by ID
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: User ID
    responses:
      204:
        description: User deleted successfully
      401:
        description: Unauthorized - Invalid or missing token
      404:
        description: User not found
